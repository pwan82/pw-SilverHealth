const { onRequest } = require('firebase-functions/v2/https')
const { defineString } = require('firebase-functions/params')
const sgMail = require('@sendgrid/mail')
const sanitizeHtml = require('sanitize-html')
const cors = require('cors')({ origin: true })

const { checkUserRole } = require('./authFunctions')
const { sanitizeEmailHtml } = require('./helpers')
const { cloudFunctionsLocation: region } = require('./cloudFunctionsLocation')

const bulkEmailSendGridApiKey = defineString('BULK_EMAIL_SENDGRID_API_KEY')
const sendgridFromEmail = defineString('SENDGRID_FROM_EMAIL')
const defaultTemplateId = defineString('SENDGRID_TEMPLATE_ID')

exports.sendBulkEmails = onRequest({ region: region }, (req, res) => {
  return cors(req, res, async () => {
    if (req.method !== 'POST') {
      return res.status(405).send('Method Not Allowed')
    }

    console.log(bulkEmailSendGridApiKey)

    try {
      // Verify user identity and admin status
      const authCheck = await checkUserRole(req.headers, 'admin')
      if (!authCheck.isLoggedIn || !authCheck.isAdmin) {
        return res.status(authCheck.status).send(authCheck.message)
      }

      const { emails, templateId, subject, content, attachments } = req.body

      if (!emails || !Array.isArray(emails) || emails.length === 0) {
        return res.status(400).send('Invalid or empty email list')
      }

      if (!subject || !content) {
        return res.status(400).send('Subject and content are required')
      }

      const msg = {
        to: emails,
        from: sendgridFromEmail.value(),
        subject: subject,
        templateId: templateId ? templateId : defaultTemplateId.value(),
        dynamicTemplateData: {
          subject: sanitizeHtml(subject),
          content: sanitizeEmailHtml(content) // HTML content generated by PrimeVue Editor
        }
      }

      if (attachments && Array.isArray(attachments)) {
        msg.attachments = attachments.map((attachment) => ({
          content: attachment.content,
          filename: attachment.filename,
          type: attachment.type,
          disposition: 'attachment'
        }))
      }

      sgMail.setApiKey(bulkEmailSendGridApiKey.value())
      sgMail
        .sendMultiple(msg)
        .then((result) => {
          console.log(`Sending email result: ${result.toString()}`)
          console.log(`Successfully sent ${result.length} emails`)
          res.status(200).json({ message: 'Emails sent successfully', count: result.length })
        })
        .catch((error) => {
          console.error('Error sending emails in sgMail.sendMultiple(msg):', error)
          res.status(500).send('Error sending emails')
        })
    } catch (error) {
      console.error('Error sending emails:', error)
      res.status(500).send('Error sending emails')
    }
  })
})
